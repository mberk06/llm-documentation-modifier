prompt: |
  ____________________INSTRUCTION START__________________
  Follow these rules:
  - Use the docstring above as a template.
  - Avoid line length exceeding 100 characters.
  - Only modify the params and return section. Don't modify anything else.
  - Don't provide types for params/returns.
  - If there aren't args or returns, don't add an empty section.
  Convert the below docstring to google's python format.
  ____________________INSTRUCTION END__________________

# Source: # https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html
function_context: | 
  Function parameters should be documented in the ``Args`` section. The name
  of each parameter is required. The type and description of each parameter
  is optional, but should be included if not obvious.

  If \*args or \*\*kwargs are accepted,
  they should be listed as ``*args`` and ``**kwargs``.

  The format for a parameter is::

      name (type): description
          The description may span multiple lines. Following
          lines should be indented. The "(type)" is optional.

          Multiple paragraphs are supported in parameter
          descriptions.

  Args:
      param1 (int): The first parameter.
      param2 (:obj:`str`, optional): The second parameter. Defaults to None.
          Second line of description should be indented.
      *args: Variable length argument list.
      **kwargs: Arbitrary keyword arguments.

  Returns:
      bool: True if successful, False otherwise.

      The return type is optional and may be specified at the beginning of
      the ``Returns`` section followed by a colon.

      The ``Returns`` section may span multiple lines and paragraphs.
      Following lines should be indented to match the first line.

      The ``Returns`` section supports any reStructuredText formatting,
      including literal blocks::

          {
              'param1': param1,
              'param2': param2
          }

  Raises:
      AttributeError: The ``Raises`` section is a list of all exceptions
          that are relevant to the interface.
      ValueError: If `param2` is equal to `param1`.


module_context: |
  This module demonstrates documentation as specified by the `Google Python
  Style Guide`_. Docstrings may extend over multiple lines. Sections are created
  with a section header and a colon followed by a block of indented text.

  Example:
      Examples can be given using either the ``Example`` or ``Examples``
      sections. Sections support any reStructuredText formatting, including
      literal blocks::

          $ python example_google.py

  Section breaks are created by resuming unindented text. Section breaks
  are also implicitly created anytime a new section starts.

  Attributes:
      module_level_variable1 (int): Module level variables may be documented in
          either the ``Attributes`` section of the module docstring, or in an
          inline docstring immediately following the variable.

          Either form is acceptable, but the two should not be mixed. Choose
          one convention to document module level variables and be consistent
          with it.

  Todo:
      * For module TODOs
      * You have to also use ``sphinx.ext.todo`` extension

  .. _Google Python Style Guide:
    http://google.github.io/styleguide/pyguide.html

class_context: |
  The __init__ method may be documented in either the class level
  docstring, or as a docstring on the __init__ method itself.

  Either form is acceptable, but the two should not be mixed. Choose one
  convention to document the __init__ method and be consistent with it.

  Note:
      Do not include the `self` parameter in the ``Args`` section.

  Args:
      msg (str): Human readable string describing the exception.
      code (:obj:`int`, optional): Error code.

  Attributes:
      msg (str): Human readable string describing the exception.
      code (int): Exception error code.
